// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AppointmentBooked extends ethereum.Event {
  get params(): AppointmentBooked__Params {
    return new AppointmentBooked__Params(this);
  }
}

export class AppointmentBooked__Params {
  _event: AppointmentBooked;

  constructor(event: AppointmentBooked) {
    this._event = event;
  }

  get doctor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get patient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get year(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get month(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get day(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get session(): i32 {
    return this._event.parameters[5].value.toI32();
  }
}

export class DepositConfirmed extends ethereum.Event {
  get params(): DepositConfirmed__Params {
    return new DepositConfirmed__Params(this);
  }
}

export class DepositConfirmed__Params {
  _event: DepositConfirmed;

  constructor(event: DepositConfirmed) {
    this._event = event;
  }

  get user_address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user_id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DoctorRegistered extends ethereum.Event {
  get params(): DoctorRegistered__Params {
    return new DoctorRegistered__Params(this);
  }
}

export class DoctorRegistered__Params {
  _event: DoctorRegistered;

  constructor(event: DoctorRegistered) {
    this._event = event;
  }

  get doctor_address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get doctor_id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PaymentConfirmed extends ethereum.Event {
  get params(): PaymentConfirmed__Params {
    return new PaymentConfirmed__Params(this);
  }
}

export class PaymentConfirmed__Params {
  _event: PaymentConfirmed;

  constructor(event: PaymentConfirmed) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SessionCanceled extends ethereum.Event {
  get params(): SessionCanceled__Params {
    return new SessionCanceled__Params(this);
  }
}

export class SessionCanceled__Params {
  _event: SessionCanceled;

  constructor(event: SessionCanceled) {
    this._event = event;
  }

  get user_address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get session_id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UserRegistered extends ethereum.Event {
  get params(): UserRegistered__Params {
    return new UserRegistered__Params(this);
  }
}

export class UserRegistered__Params {
  _event: UserRegistered;

  constructor(event: UserRegistered) {
    this._event = event;
  }

  get user_address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user_id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawalSuccessful extends ethereum.Event {
  get params(): WithdrawalSuccessful__Params {
    return new WithdrawalSuccessful__Params(this);
  }
}

export class WithdrawalSuccessful__Params {
  _event: WithdrawalSuccessful;

  constructor(event: WithdrawalSuccessful) {
    this._event = event;
  }

  get user_address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class session_accepted extends ethereum.Event {
  get params(): session_accepted__Params {
    return new session_accepted__Params(this);
  }
}

export class session_accepted__Params {
  _event: session_accepted;

  constructor(event: session_accepted) {
    this._event = event;
  }

  get appointment_id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class session_marked_complete extends ethereum.Event {
  get params(): session_marked_complete__Params {
    return new session_marked_complete__Params(this);
  }
}

export class session_marked_complete__Params {
  _event: session_marked_complete;

  constructor(event: session_marked_complete) {
    this._event = event;
  }

  get appointment_id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get usersaddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WellNexus__appointment_infoResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: i32;
  value7: BigInt;
  value8: boolean;
  value9: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: i32,
    value7: BigInt,
    value8: boolean,
    value9: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6)),
    );
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    return map;
  }

  getAppointment_id(): BigInt {
    return this.value0;
  }

  getDoctor(): Address {
    return this.value1;
  }

  getPatient(): Address {
    return this.value2;
  }

  getYear(): BigInt {
    return this.value3;
  }

  getMonth(): BigInt {
    return this.value4;
  }

  getDay(): BigInt {
    return this.value5;
  }

  getSession(): i32 {
    return this.value6;
  }

  getFee(): BigInt {
    return this.value7;
  }

  getUsers_certification(): boolean {
    return this.value8;
  }

  getDoctors_certification(): boolean {
    return this.value9;
  }
}

export class WellNexus__check_doctor_schedulesResultValue0Struct extends ethereum.Tuple {
  get appointment_id(): BigInt {
    return this[0].toBigInt();
  }

  get is_booked(): boolean {
    return this[1].toBoolean();
  }

  get status(): i32 {
    return this[2].toI32();
  }

  get patient_address(): Address {
    return this[3].toAddress();
  }
}

export class WellNexus__doctor_detailsResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: string;
  value4: BigInt;
  value5: string;
  value6: BigInt;
  value7: string;
  value8: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: string,
    value3: string,
    value4: BigInt,
    value5: string,
    value6: BigInt,
    value7: string,
    value8: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromString(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }

  getDoctor_id(): BigInt {
    return this.value0;
  }

  getDoctor_address(): Address {
    return this.value1;
  }

  getImage_url(): string {
    return this.value2;
  }

  getName(): string {
    return this.value3;
  }

  getBalance(): BigInt {
    return this.value4;
  }

  getGender(): string {
    return this.value5;
  }

  getCharge_per_hour(): BigInt {
    return this.value6;
  }

  getSpecialty(): string {
    return this.value7;
  }

  getTotal_appointments(): BigInt {
    return this.value8;
  }
}

export class WellNexus__get_appointment_detailsResultValue0Struct extends ethereum.Tuple {
  get appointment_id(): BigInt {
    return this[0].toBigInt();
  }

  get doctor(): Address {
    return this[1].toAddress();
  }

  get patient(): Address {
    return this[2].toAddress();
  }

  get Year(): BigInt {
    return this[3].toBigInt();
  }

  get Month(): BigInt {
    return this[4].toBigInt();
  }

  get Day(): BigInt {
    return this[5].toBigInt();
  }

  get session(): i32 {
    return this[6].toI32();
  }

  get fee(): BigInt {
    return this[7].toBigInt();
  }

  get users_certification(): boolean {
    return this[8].toBoolean();
  }

  get doctors_certification(): boolean {
    return this[9].toBoolean();
  }
}

export class WellNexus__get_doctor_detailsResultValue0Struct extends ethereum.Tuple {
  get doctor_id(): BigInt {
    return this[0].toBigInt();
  }

  get doctor_address(): Address {
    return this[1].toAddress();
  }

  get image_url(): string {
    return this[2].toString();
  }

  get name(): string {
    return this[3].toString();
  }

  get balance(): BigInt {
    return this[4].toBigInt();
  }

  get gender(): string {
    return this[5].toString();
  }

  get charge_per_hour(): BigInt {
    return this[6].toBigInt();
  }

  get specialty(): string {
    return this[7].toString();
  }

  get total_appointments(): BigInt {
    return this[8].toBigInt();
  }
}

export class WellNexus__get_user_detailsResultValue0Struct extends ethereum.Tuple {
  get user_id(): BigInt {
    return this[0].toBigInt();
  }

  get user_address(): Address {
    return this[1].toAddress();
  }

  get image_url(): string {
    return this[2].toString();
  }

  get name(): string {
    return this[3].toString();
  }

  get balance(): BigInt {
    return this[4].toBigInt();
  }

  get gender(): string {
    return this[5].toString();
  }

  get occupation(): string {
    return this[6].toString();
  }

  get total_appointments(): BigInt {
    return this[7].toBigInt();
  }
}

export class WellNexus__user_detailsResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: string;
  value4: BigInt;
  value5: string;
  value6: string;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: string,
    value3: string,
    value4: BigInt,
    value5: string,
    value6: string,
    value7: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getUser_id(): BigInt {
    return this.value0;
  }

  getUser_address(): Address {
    return this.value1;
  }

  getImage_url(): string {
    return this.value2;
  }

  getName(): string {
    return this.value3;
  }

  getBalance(): BigInt {
    return this.value4;
  }

  getGender(): string {
    return this.value5;
  }

  getOccupation(): string {
    return this.value6;
  }

  getTotal_appointments(): BigInt {
    return this.value7;
  }
}

export class WellNexus extends ethereum.SmartContract {
  static bind(address: Address): WellNexus {
    return new WellNexus("WellNexus", address);
  }

  accumulated_fees(): BigInt {
    let result = super.call(
      "accumulated_fees",
      "accumulated_fees():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_accumulated_fees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accumulated_fees",
      "accumulated_fees():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  all_doctors(param0: BigInt): BigInt {
    let result = super.call("all_doctors", "all_doctors(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBigInt();
  }

  try_all_doctors(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "all_doctors",
      "all_doctors(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  all_users(param0: BigInt): BigInt {
    let result = super.call("all_users", "all_users(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBigInt();
  }

  try_all_users(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("all_users", "all_users(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  appointment_info(param0: BigInt): WellNexus__appointment_infoResult {
    let result = super.call(
      "appointment_info",
      "appointment_info(uint256):(uint256,address,address,uint256,uint256,uint256,uint8,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new WellNexus__appointment_infoResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toI32(),
      result[7].toBigInt(),
      result[8].toBoolean(),
      result[9].toBoolean(),
    );
  }

  try_appointment_info(
    param0: BigInt,
  ): ethereum.CallResult<WellNexus__appointment_infoResult> {
    let result = super.tryCall(
      "appointment_info",
      "appointment_info(uint256):(uint256,address,address,uint256,uint256,uint256,uint8,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new WellNexus__appointment_infoResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toI32(),
        value[7].toBigInt(),
        value[8].toBoolean(),
        value[9].toBoolean(),
      ),
    );
  }

  check_doctor_schedules(
    doctor_address: Address,
    year: BigInt,
    month: BigInt,
    day: BigInt,
    session: i32,
  ): WellNexus__check_doctor_schedulesResultValue0Struct {
    let result = super.call(
      "check_doctor_schedules",
      "check_doctor_schedules(address,uint256,uint256,uint256,uint8):((uint256,bool,uint8,address))",
      [
        ethereum.Value.fromAddress(doctor_address),
        ethereum.Value.fromUnsignedBigInt(year),
        ethereum.Value.fromUnsignedBigInt(month),
        ethereum.Value.fromUnsignedBigInt(day),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(session)),
      ],
    );

    return changetype<WellNexus__check_doctor_schedulesResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_check_doctor_schedules(
    doctor_address: Address,
    year: BigInt,
    month: BigInt,
    day: BigInt,
    session: i32,
  ): ethereum.CallResult<WellNexus__check_doctor_schedulesResultValue0Struct> {
    let result = super.tryCall(
      "check_doctor_schedules",
      "check_doctor_schedules(address,uint256,uint256,uint256,uint8):((uint256,bool,uint8,address))",
      [
        ethereum.Value.fromAddress(doctor_address),
        ethereum.Value.fromUnsignedBigInt(year),
        ethereum.Value.fromUnsignedBigInt(month),
        ethereum.Value.fromUnsignedBigInt(day),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(session)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<WellNexus__check_doctor_schedulesResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  check_is_doctor(_user_address: Address): boolean {
    let result = super.call(
      "check_is_doctor",
      "check_is_doctor(address):(bool)",
      [ethereum.Value.fromAddress(_user_address)],
    );

    return result[0].toBoolean();
  }

  try_check_is_doctor(_user_address: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "check_is_doctor",
      "check_is_doctor(address):(bool)",
      [ethereum.Value.fromAddress(_user_address)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  check_is_user(_user_address: Address): boolean {
    let result = super.call("check_is_user", "check_is_user(address):(bool)", [
      ethereum.Value.fromAddress(_user_address),
    ]);

    return result[0].toBoolean();
  }

  try_check_is_user(_user_address: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "check_is_user",
      "check_is_user(address):(bool)",
      [ethereum.Value.fromAddress(_user_address)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  doctor_details(param0: Address): WellNexus__doctor_detailsResult {
    let result = super.call(
      "doctor_details",
      "doctor_details(address):(uint256,address,string,string,uint256,string,uint256,string,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new WellNexus__doctor_detailsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toString(),
      result[4].toBigInt(),
      result[5].toString(),
      result[6].toBigInt(),
      result[7].toString(),
      result[8].toBigInt(),
    );
  }

  try_doctor_details(
    param0: Address,
  ): ethereum.CallResult<WellNexus__doctor_detailsResult> {
    let result = super.tryCall(
      "doctor_details",
      "doctor_details(address):(uint256,address,string,string,uint256,string,uint256,string,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new WellNexus__doctor_detailsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toString(),
        value[4].toBigInt(),
        value[5].toString(),
        value[6].toBigInt(),
        value[7].toString(),
        value[8].toBigInt(),
      ),
    );
  }

  doctor_id_owner(param0: BigInt): Address {
    let result = super.call(
      "doctor_id_owner",
      "doctor_id_owner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_doctor_id_owner(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "doctor_id_owner",
      "doctor_id_owner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  doctors_appointments(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "doctors_appointments",
      "doctors_appointments(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_doctors_appointments(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "doctors_appointments",
      "doctors_appointments(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_all_doctors(): Array<Address> {
    let result = super.call(
      "get_all_doctors",
      "get_all_doctors():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_get_all_doctors(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "get_all_doctors",
      "get_all_doctors():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  get_all_users(): Array<Address> {
    let result = super.call("get_all_users", "get_all_users():(address[])", []);

    return result[0].toAddressArray();
  }

  try_get_all_users(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "get_all_users",
      "get_all_users():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  get_appointment_details(
    _appointment_id: BigInt,
  ): WellNexus__get_appointment_detailsResultValue0Struct {
    let result = super.call(
      "get_appointment_details",
      "get_appointment_details(uint256):((uint256,address,address,uint256,uint256,uint256,uint8,uint256,bool,bool))",
      [ethereum.Value.fromUnsignedBigInt(_appointment_id)],
    );

    return changetype<WellNexus__get_appointment_detailsResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_get_appointment_details(
    _appointment_id: BigInt,
  ): ethereum.CallResult<WellNexus__get_appointment_detailsResultValue0Struct> {
    let result = super.tryCall(
      "get_appointment_details",
      "get_appointment_details(uint256):((uint256,address,address,uint256,uint256,uint256,uint8,uint256,bool,bool))",
      [ethereum.Value.fromUnsignedBigInt(_appointment_id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<WellNexus__get_appointment_detailsResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  get_doctor_appointment(_doctor_address: Address): Array<BigInt> {
    let result = super.call(
      "get_doctor_appointment",
      "get_doctor_appointment(address):(uint256[])",
      [ethereum.Value.fromAddress(_doctor_address)],
    );

    return result[0].toBigIntArray();
  }

  try_get_doctor_appointment(
    _doctor_address: Address,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "get_doctor_appointment",
      "get_doctor_appointment(address):(uint256[])",
      [ethereum.Value.fromAddress(_doctor_address)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_doctor_details(
    doctor_address: Address,
  ): WellNexus__get_doctor_detailsResultValue0Struct {
    let result = super.call(
      "get_doctor_details",
      "get_doctor_details(address):((uint256,address,string,string,uint256,string,uint256,string,uint256))",
      [ethereum.Value.fromAddress(doctor_address)],
    );

    return changetype<WellNexus__get_doctor_detailsResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_get_doctor_details(
    doctor_address: Address,
  ): ethereum.CallResult<WellNexus__get_doctor_detailsResultValue0Struct> {
    let result = super.tryCall(
      "get_doctor_details",
      "get_doctor_details(address):((uint256,address,string,string,uint256,string,uint256,string,uint256))",
      [ethereum.Value.fromAddress(doctor_address)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<WellNexus__get_doctor_detailsResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  get_doctor_id(doctor_address: Address): BigInt {
    let result = super.call(
      "get_doctor_id",
      "get_doctor_id(address):(uint256)",
      [ethereum.Value.fromAddress(doctor_address)],
    );

    return result[0].toBigInt();
  }

  try_get_doctor_id(doctor_address: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_doctor_id",
      "get_doctor_id(address):(uint256)",
      [ethereum.Value.fromAddress(doctor_address)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_user_appointment(_user_address: Address): Array<BigInt> {
    let result = super.call(
      "get_user_appointment",
      "get_user_appointment(address):(uint256[])",
      [ethereum.Value.fromAddress(_user_address)],
    );

    return result[0].toBigIntArray();
  }

  try_get_user_appointment(
    _user_address: Address,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "get_user_appointment",
      "get_user_appointment(address):(uint256[])",
      [ethereum.Value.fromAddress(_user_address)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  get_user_balance(_user_address: Address): BigInt {
    let result = super.call(
      "get_user_balance",
      "get_user_balance(address):(uint256)",
      [ethereum.Value.fromAddress(_user_address)],
    );

    return result[0].toBigInt();
  }

  try_get_user_balance(_user_address: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_user_balance",
      "get_user_balance(address):(uint256)",
      [ethereum.Value.fromAddress(_user_address)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_user_details(
    user_address: Address,
  ): WellNexus__get_user_detailsResultValue0Struct {
    let result = super.call(
      "get_user_details",
      "get_user_details(address):((uint256,address,string,string,uint256,string,string,uint256))",
      [ethereum.Value.fromAddress(user_address)],
    );

    return changetype<WellNexus__get_user_detailsResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_get_user_details(
    user_address: Address,
  ): ethereum.CallResult<WellNexus__get_user_detailsResultValue0Struct> {
    let result = super.tryCall(
      "get_user_details",
      "get_user_details(address):((uint256,address,string,string,uint256,string,string,uint256))",
      [ethereum.Value.fromAddress(user_address)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<WellNexus__get_user_detailsResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  get_user_id(user_address: Address): BigInt {
    let result = super.call("get_user_id", "get_user_id(address):(uint256)", [
      ethereum.Value.fromAddress(user_address),
    ]);

    return result[0].toBigInt();
  }

  try_get_user_id(user_address: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_user_id",
      "get_user_id(address):(uint256)",
      [ethereum.Value.fromAddress(user_address)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  is_doctor(param0: Address): boolean {
    let result = super.call("is_doctor", "is_doctor(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_is_doctor(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("is_doctor", "is_doctor(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  is_user(param0: Address): boolean {
    let result = super.call("is_user", "is_user(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_is_user(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("is_user", "is_user(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  patients_appointments(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "patients_appointments",
      "patients_appointments(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_patients_appointments(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "patients_appointments",
      "patients_appointments(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pending_doctor_charge(): BigInt {
    let result = super.call(
      "pending_doctor_charge",
      "pending_doctor_charge():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_pending_doctor_charge(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pending_doctor_charge",
      "pending_doctor_charge():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  register_user(
    name: string,
    image_url: string,
    gender: string,
    occupation: string,
  ): BigInt {
    let result = super.call(
      "register_user",
      "register_user(string,string,string,string):(uint256)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(image_url),
        ethereum.Value.fromString(gender),
        ethereum.Value.fromString(occupation),
      ],
    );

    return result[0].toBigInt();
  }

  try_register_user(
    name: string,
    image_url: string,
    gender: string,
    occupation: string,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "register_user",
      "register_user(string,string,string,string):(uint256)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(image_url),
        ethereum.Value.fromString(gender),
        ethereum.Value.fromString(occupation),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  total_appointment(): BigInt {
    let result = super.call(
      "total_appointment",
      "total_appointment():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_total_appointment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "total_appointment",
      "total_appointment():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  total_doctors(): BigInt {
    let result = super.call("total_doctors", "total_doctors():(uint256)", []);

    return result[0].toBigInt();
  }

  try_total_doctors(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "total_doctors",
      "total_doctors():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  total_users(): BigInt {
    let result = super.call("total_users", "total_users():(uint256)", []);

    return result[0].toBigInt();
  }

  try_total_users(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("total_users", "total_users():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdt(): Address {
    let result = super.call("usdt", "usdt():(address)", []);

    return result[0].toAddress();
  }

  try_usdt(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdt", "usdt():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  user_details(param0: Address): WellNexus__user_detailsResult {
    let result = super.call(
      "user_details",
      "user_details(address):(uint256,address,string,string,uint256,string,string,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new WellNexus__user_detailsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toString(),
      result[4].toBigInt(),
      result[5].toString(),
      result[6].toString(),
      result[7].toBigInt(),
    );
  }

  try_user_details(
    param0: Address,
  ): ethereum.CallResult<WellNexus__user_detailsResult> {
    let result = super.tryCall(
      "user_details",
      "user_details(address):(uint256,address,string,string,uint256,string,string,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new WellNexus__user_detailsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toString(),
        value[4].toBigInt(),
        value[5].toString(),
        value[6].toString(),
        value[7].toBigInt(),
      ),
    );
  }

  user_id_owner(param0: BigInt): Address {
    let result = super.call(
      "user_id_owner",
      "user_id_owner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_user_id_owner(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "user_id_owner",
      "user_id_owner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get usdt_address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class Accept_sessionCall extends ethereum.Call {
  get inputs(): Accept_sessionCall__Inputs {
    return new Accept_sessionCall__Inputs(this);
  }

  get outputs(): Accept_sessionCall__Outputs {
    return new Accept_sessionCall__Outputs(this);
  }
}

export class Accept_sessionCall__Inputs {
  _call: Accept_sessionCall;

  constructor(call: Accept_sessionCall) {
    this._call = call;
  }

  get appointment_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Accept_sessionCall__Outputs {
  _call: Accept_sessionCall;

  constructor(call: Accept_sessionCall) {
    this._call = call;
  }
}

export class Book_appointmentCall extends ethereum.Call {
  get inputs(): Book_appointmentCall__Inputs {
    return new Book_appointmentCall__Inputs(this);
  }

  get outputs(): Book_appointmentCall__Outputs {
    return new Book_appointmentCall__Outputs(this);
  }
}

export class Book_appointmentCall__Inputs {
  _call: Book_appointmentCall;

  constructor(call: Book_appointmentCall) {
    this._call = call;
  }

  get doctor_address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get year(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get month(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get day(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get session(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class Book_appointmentCall__Outputs {
  _call: Book_appointmentCall;

  constructor(call: Book_appointmentCall) {
    this._call = call;
  }
}

export class Cancel_appointmentCall extends ethereum.Call {
  get inputs(): Cancel_appointmentCall__Inputs {
    return new Cancel_appointmentCall__Inputs(this);
  }

  get outputs(): Cancel_appointmentCall__Outputs {
    return new Cancel_appointmentCall__Outputs(this);
  }
}

export class Cancel_appointmentCall__Inputs {
  _call: Cancel_appointmentCall;

  constructor(call: Cancel_appointmentCall) {
    this._call = call;
  }

  get appointment_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Cancel_appointmentCall__Outputs {
  _call: Cancel_appointmentCall;

  constructor(call: Cancel_appointmentCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get user_address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class Register_doctorCall extends ethereum.Call {
  get inputs(): Register_doctorCall__Inputs {
    return new Register_doctorCall__Inputs(this);
  }

  get outputs(): Register_doctorCall__Outputs {
    return new Register_doctorCall__Outputs(this);
  }
}

export class Register_doctorCall__Inputs {
  _call: Register_doctorCall;

  constructor(call: Register_doctorCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get gender(): string {
    return this._call.inputValues[1].value.toString();
  }

  get specialty(): string {
    return this._call.inputValues[2].value.toString();
  }

  get doctor_address(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get charge_per_hour(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get image_url(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class Register_doctorCall__Outputs {
  _call: Register_doctorCall;

  constructor(call: Register_doctorCall) {
    this._call = call;
  }
}

export class Register_userCall extends ethereum.Call {
  get inputs(): Register_userCall__Inputs {
    return new Register_userCall__Inputs(this);
  }

  get outputs(): Register_userCall__Outputs {
    return new Register_userCall__Outputs(this);
  }
}

export class Register_userCall__Inputs {
  _call: Register_userCall;

  constructor(call: Register_userCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get image_url(): string {
    return this._call.inputValues[1].value.toString();
  }

  get gender(): string {
    return this._call.inputValues[2].value.toString();
  }

  get occupation(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class Register_userCall__Outputs {
  _call: Register_userCall;

  constructor(call: Register_userCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Session_completedCall extends ethereum.Call {
  get inputs(): Session_completedCall__Inputs {
    return new Session_completedCall__Inputs(this);
  }

  get outputs(): Session_completedCall__Outputs {
    return new Session_completedCall__Outputs(this);
  }
}

export class Session_completedCall__Inputs {
  _call: Session_completedCall;

  constructor(call: Session_completedCall) {
    this._call = call;
  }

  get appointment_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Session_completedCall__Outputs {
  _call: Session_completedCall;

  constructor(call: Session_completedCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
